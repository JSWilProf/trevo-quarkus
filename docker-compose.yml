version: '3.8'
services:
  postgres_produtos:
    container_name: postgres_produtos_trevo
    image: postgres:12.12
    environment:
      POSTGRES_USER: produtos
      POSTGRES_PASSWORD: produtos
    ports:
      - '5432:5432'
  postgres_propostas:
    container_name: postgres_propostas_trevo
    image: postgres:12.12
    environment:
      POSTGRES_USER: propostas
      POSTGRES_PASSWORD: propostas
    ports:
      - '5433:5432'
  keycloak_trevo:
    container_name: keycloak_trevo
    image: jboss/keycloak:16.1.1
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    ports:
      - '8180:8080'
  jaeger_trevo:
    container_name: jaeger_trevo
    image: jaegertracing/all-in-one:1.37
    ports:
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '4317:4317'
      - '4318:4318'
      - '14250:14250'
      - '14268:14268'
      - '14269:14269'
      - '9411:9411'
  kafdrop_trevo:
    container_name: kafka_console_trevo
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka_trevo:29092"
    depends_on:
      - "kafka_trevo"
  kafka_trevo:
    container_name: kafka_server_trevo
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka_trevo:29092,EXTERNAL://${KAFKA_HOST}:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
  setup_trevo:
    container_name: setup_elastic_trevo
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
    - source: ./certs
      target: /usr/share/elasticsearch/config/certs
      type: bind
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: ${ES_CONTAINER_NAME}\n"\
          "    dns:\n"\
          "      - ${ES_CONTAINER_NAME}\n"\
          "      - ${ES_HOST}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_HOST}\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://${ES_CONTAINER_NAME}:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://${ES_CONTAINER_NAME}:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Setting logstash_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://${ES_CONTAINER_NAME}:9200/_security/user/logstash_system/_password -d "{\"password\":\"${LOGSTASH_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/${ES_CONTAINER_NAME}/${ES_CONTAINER_NAME}.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
  elastic_trevo:
    container_name: ${ES_CONTAINER_NAME}
    depends_on:
      setup_trevo:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - source: ./certs
        target: /usr/share/elasticsearch/config/certs
        type: bind
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=${ES_CONTAINER_NAME}
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=${ES_CONTAINER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/${ES_CONTAINER_NAME}/${ES_CONTAINER_NAME}.key
      - xpack.security.http.ssl.certificate=certs/${ES_CONTAINER_NAME}/${ES_CONTAINER_NAME}.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/${ES_CONTAINER_NAME}/${ES_CONTAINER_NAME}.key
      - xpack.security.transport.ssl.certificate=certs/${ES_CONTAINER_NAME}/${ES_CONTAINER_NAME}.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    deploy:
      resources:
        limits:
          memory: 1G
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  kibana_trevo:
    container_name: kibana_trevo
    depends_on:
      - elastic_trevo
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - source: ./certs
        target: /usr/share/kibana/config/certs
        type: bind
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana_trevo
      - ELASTICSEARCH_HOSTS=https://${ES_CONTAINER_NAME}:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  logstash_trevo:
    container_name: logstash_trevo
    user: "1000:0"
    depends_on:
      - elastic_trevo
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    volumes:
      - source: ./pipelines
        target: /usr/share/logstash/pipeline
        type: bind
      - source: ./certs
        target: /usr/share/logstash/certs
        type: bind
    ports:
      - ${LOGSTASH_HOST}:12201:12201/udp
    environment:
      - xpack.monitoring.elasticsearch.hosts=[ "https://${ES_CONTAINER_NAME}:9200" ]
      - xpack.monitoring.elasticsearch.username="logstash_system"
      - xpack.monitoring.elasticsearch.password="${LOGSTASH_PASSWORD}"
      - xpack.monitoring.elasticsearch.ssl.certificate_authority=certs/ca/ca.crt
#  produtos_trevo:
#    container_name: produtos_trevo
#    depends_on:
#      - postgres_produtos
#      - keycloak_trevo
#      - jaeger_trevo
#      - kafka_trevo
#      - logstash_trevo
#    image: quarkus/produto-jvm
#    ports:
#      - 8080:8080
#  propostas_trevo:
#    container_name: propostas_trevo
#    depends_on:
#      - postgres_propostas
#      - keycloak_trevo
#      - jaeger_trevo
#      - kafka_trevo
#    image: quarkus/proposta-jvm
#    ports:
#      - 8081:8081
volumes:
  certs:
    external: true
  esdata01:
    driver: local
  kibanadata:
    driver: local